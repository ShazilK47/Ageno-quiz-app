rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        (request.auth.token.role == "admin" || 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "admin");
    }
    
    // User document rules
    match /users/{userId} {
      // Users can read their own data, admins can read any user
      allow read: if isOwner(userId) || isAdmin();
      
      // New users can create their own document
      allow create: if isOwner(userId);
      
      // Combined rule for user updates - either:
      // 1. User updating their own data except role and customClaims fields
      // 2. User updating only their activityLogs, updatedAt, lastLoginAt fields
      // 3. Admin updating any fields
      allow update: if (isOwner(userId) && 
                      (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['role', 'customClaims']) || 
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['activityLogs', 'updatedAt', 'lastLoginAt']))) || 
                     isAdmin();
      
      // Only admins can delete user documents
      allow delete: if isAdmin();
    }
    
    // Quiz questions rules
    match /quizzes/{quizId} {
      // Anyone can read public quizzes
      allow read: if resource.data.isPublic == true || isAdmin();
      
      // Only admins can create, update, or delete quizzes
      allow create, update, delete: if isAdmin();
      
      // Define rules for nested collections if needed
      match /questions/{questionId} {
        // Only admins can read, create, update, delete quiz questions
        allow read, create, update, delete: if isAdmin();
      }
      
      match /responses/{responseId} {
        // Quiz owners and admins can read responses, users can read their own responses
        allow read: if isAdmin() || 
                      resource.data.userId == request.auth.uid;
        
        // Authenticated users can create responses for published quizzes
        allow create: if isAuthenticated() && 
                        get(/databases/$(database)/documents/quizzes/$(quizId)).data.isPublished == true;
        
        // Users can update only their own responses
        allow update: if resource.data.userId == request.auth.uid;
        
        // Only admins can delete responses
        allow delete: if isAdmin();
      }
    }
    
    // Quiz session rules
    match /sessions/{sessionId} {
      // Quiz owners, session participants, and admins can read sessions
      allow read: if isAuthenticated() && 
                    (isAdmin() || 
                     resource.data.participants[request.auth.uid] != null);
      
      // Only admins can create sessions
      allow create: if isAdmin();
      
      // Only admins can update sessions
      allow update: if isAdmin();
      
      // Only admins can delete sessions
      allow delete: if isAdmin();
    }
    
    // User activities (legacy) collection - gradually migrate to using in-document activityLogs
    match /userActivities/{activityId} {
      // Users can read their own activities, admins can read any
      allow read: if isAuthenticated() && 
                    (resource.data.userId == request.auth.uid || isAdmin());
      
      // Users can create activities for themselves
      allow create: if isAuthenticated() && 
                      request.resource.data.userId == request.auth.uid;
      
      // No updates or deletes
      allow update, delete: if false;
    }
  }
}